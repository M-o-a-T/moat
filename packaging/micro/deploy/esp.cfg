# Basic setup for an ESP8266 or ESP32 controller
#
#
# sub-config for moat.micro
micro:
  # options and link for "moat micro setup"
  setup:
    # path to the micropython cross compiler
    cross: "lib/micropython/mpy-cross/build/mpy-cross"

    # XXX unused
    std: true

    # rudimentary MoaT stack
    apps:
      r: serial.Raw
    r:
      # serial port configuration
      port: &rp /dev/ttyUSB0
      mode: &rm
        rate: &rs 115200
        # rate: &rs 74880  # MoaT uses the boot loader's baud rate on ESP8266
        dtr_flip: true
        rts_flip: true
        dtr_state: true
        rts_state: true
        dtr_rts: 0.1
    
  # options for the install script at moat/micro/scripts/install
  install:
    port: esp32  # esp8266, rp2
    rate: 500000  # baud rate for feeding the ESP boot loader

    # for Raspberry Pi Pico:
    # dir: /media/yourlogin/RPI-RP2

  # main service. This could be a serial.Link instead, but this way
  # "moat micro setup --run" keeps the existing link going
  apps:
    r: serial.Raw
    s: remote.Link
    n: net.unix.Port
  r:
    port: *rp
    mode: *rm
  s:
    path: !P r
    link: &lk
      frame: 0x85
      console: true
    log:
      txt: "S"
  n: &np
    port: /tmp/moat.test
      
  # this is the part that gets copied to the remote system
  cfg:
    r:
      net:
        name: "test-esp"  # optional
        country: "de"  # optional but strongly recommended

        # skip the rest to create a standalone AP
        ap: "MyNetwork"
        pwd: "SuperSecret"

        # skip the rest to use DHCP
        # if you provide "addr", "router" and "dns" are mandatory
        addr: 10.1.2.3
        netmask: 26  # or 255.whatever
        router: 10.1.2.1
        dns: 1.1.1.1  # assuming you don't have your own

      apps:
        wdt: wdt.Cmd
        r: stdio.StdIO
        f: fs.Cmd
      r: 
        port: 0
        mode: *rm
        link: *lk

  # Service for "moat micro cmd â€¦" to connect to the main code.
  connect:
    apps:
      r: net.unix.Link
    r: *np

logging:
  version: 1
  loggers:
    asyncserf:
      level: INFO
    xknx.raw_socket:
      level: INFO
  root:
    handlers:
      - stderr
    level: INFO
  handlers:
#           "logfile": {
#               "class": "logging.FileHandler",
#               "filename": "_test.log",
#               "level": "DEBUG",
#               "formatter": "std",
    stderr:
      class: logging.StreamHandler
      level: DEBUG
      formatter: std
      stream: "ext://sys.stderr"
  formatters:
    std:
      class: "moat.util.TimeOnlyFormatter"
      format: "%(asctime)s %(levelname)s:%(name)s:%(message)s"
      disable_existing_loggers: false
  
