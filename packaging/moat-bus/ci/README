This directory contains support code for automated testing.

The default test setup requires
* one Raspberry Pi 2 (or better)
* three Blue Pill boards
* two USB TTL serial adapters, 3.3V
* four 10k pull-up resistors
* several wires connecting these

The test runs several flash updates on each device. Thus it should not run
indiscriminately, as Flash storage has a limited number of write cycles
(~10000) before it breaks down.

Usage:

First, prepare the test system:

* copy the `ci/cfg` subdirectory someplace, change as appropriate
* export CFG=/path/to/cfg
* ci/run a
* ci/run b  # in a new terminal
* ci/run c  # in another new terminal

Actual Testing (run this on your build system):
* make pio  # the first build pass may fail. This is currently unavoidable.
* make pio copy run

Files:
* 71-serial.rules: udev rules file to auto-create links to the pills' serial ports
* cfg: subdirectory for config files (GPIO ports etc)
* config.sh: loader for configuration, not useable directly
* openocd: start a debugger on one of the pills
* prog: code to flash a Pill. RESET will be left asserted.
* rc.local: hack to set the Pi's GPIO ports correctly
* reset: script to reset (and start) a pill
* run: code that listens to a Pill's serial port,
  possibly relaying to MQTT if it's a gateway,
  switched on/off by sending R/K to /run/moat-test/test_X (X=a,b,c)
* test: Script that re-flashes and resets all (or a subset of) Pills

To debug code on a board:
* start "ci/openocd a" (or b or c)
* in another terminal, start "gdb /path/to/firmware.elf"
* enter "target extended-remote localhost:3333" (this command is also displayed
  right above your GDB prompt)
* use common GDB commands

The main Makefile's "ci" target compiles code for basic "node" and "gate" roles,
sends the binaries to a remote system named "TESTER", and re-flashes them there.
