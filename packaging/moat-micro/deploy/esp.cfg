# Basic setup for an ESP8266 or ESP32 controller
#
#
# sub-config for moat.micro
_vars:
  device: &dev "/dev/ttyUSB0"
  mode: &rmode
    rate: 115200
    # rate: &rs 74880  # MoaT uses the boot loader's baud rate on ESP8266
    dtr_flip: true
    rts_flip: true
    dtr_state: false
    rts_state: false
    dtr_rts: 0.1
  net: &net
    name: "test-esp"  # optional
    country: "de"  # optional but strongly recommended

    # skip the rest to create a standalone AP
    ap: "MyNetwork"
    pwd: "SuperSecret"

    # skip the rest to use DHCP
    # if you provide "addr", "router" and "dns" are mandatory
    addr: &netadr 10.1.2.3
    netmask: 26  # or 255.whatever
    router: 10.1.2.1
    dns: 1.1.1.1  # assuming you don't have your own
  port: &netport 27589


micro:
  # options and link for "moat micro setup"
  setup:

    # options for the installation part
    install:
      port: esp32  # esp8266, rp2
      rate: 500000  # baud rate for feeding the ESP boot loader

    # path to the micropython cross compiler
    args: &upd
      cross: "ext/micropython/mpy-cross/build/mpy-cross"
      config: !P cfg.r
      update: True

    # XXX unused
    std: true

    # rudimentary MoaT stack to talk to a local serial port
    apps:
      r: serial.Raw
    r:
      # serial port configuration
      port: *dev
      mode: *rmode

    # Main service in "setup --run" mode.
    # The serial.Raw+remote.Link combo is not a serial.Link because
    # this way we keep the existing link going:
    run:
      apps:
        s: remote.Link
        n: net.unix.Port
      # merged with the common setup, so `r` is still present
      s:
        path: !P r
        link: &lk
          frame: 0x85
          console: true
        log:
          txt: "S"
      n: &np
        port: /tmp/moat.test

  run:
    apps:
      t: net.tcp.Link
      n: net.unix.Port
    t: &snet
      # port: /tmp/moat.herd
      host: *netadr
      port: *netport
    n: *np

  # this is the part that gets copied to the remote system
  cfg:
    r:
      net: *net

      apps:
        # wdt: wdt.Cmd
        r: stdio.StdIO
        f: fs.Cmd
        n: net.tcp.Port
      r:
        port: 0
        mode: *rmode
        link: *lk
      n:
        port: *netport
        host: "0.0.0.0"
        # MUST firewall

  # Service for "moat micro cmd â€¦" to connect to the main code.
  connect:
    apps:
      r: net.unix.Link
    r: *np
    sync: *upd

logging:
  version: 1
  loggers:
    xknx.raw_socket:
      level: INFO
  root:
    handlers:
      - stderr
    level: INFO
  handlers:
#           "logfile": {
#               "class": "logging.FileHandler",
#               "filename": "_test.log",
#               "level": "DEBUG",
#               "formatter": "std",
    stderr:
      class: logging.StreamHandler
      level: DEBUG
      formatter: std
      stream: "ext://sys.stderr"
  formatters:
    std:
      class: "moat.util.TimeOnlyFormatter"
      format: "%(asctime)s %(levelname)s:%(name)s:%(message)s"
      disable_existing_loggers: false
