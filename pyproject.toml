[build-system]
build-backend = "setuptools.build_meta"
requires = [ "setuptools", "wheel", "setuptools-scm",]

[project]
classifiers = [
	"Intended Audience :: Developers",
	"Programming Language :: Python :: 3",
	"Framework :: AsyncIO",
	"Framework :: Trio",
	"Framework :: AnyIO",
	"License :: OSI Approved",
	"Development Status :: 4 - Beta",
	]
dependencies = [
	"anyio ~= 4.9",
	"trio",
	"alembic",
	"anyio_serial",
	"asyncactor ~= 0.26.2",
	"asyncakumuli ~= 0.6.2",
	"asyncclick",
	"asyncowfs",
	"asyncscope",
	"asyncwebsockets",
	"cffi",
	"git",
	"httpx",
	"jmespath",
	"jsonschema",
	"mqttproto",
	"nacl",
	"outcome",
	"psutil",
	"pyfuse3",
	"pymodbus ~= 3.8",
	"range_set",
	"ruyaml",
	"simpleeval",
	"sqlalchemy",
	"tomlkit",
	"transitions",
	"wsproto",
	]
dynamic = [ "version",]
keywords = [ "MoaT",]
requires-python = ">=3.12"
name = "moat"
description = "The compleat MoaT"
readme = "README.md"

[[project.authors]]
email = "matthias@urlichs.de"
name = "Matthias Urlichs"

[project.scripts]
moat = "moat.main:cmd"

[project.license]
file = "LICENSE.txt"

[project.urls]
homepage = "https://m-o-a-t.org"
repository = "https://github.com/M-o-a-T/moat"

[tool.setuptools]
packages = [ "moat",]
[tool.setuptools.package-data]
"*" = ["*.yaml"]

[tool.setuptools_scm]

[tool.moat]

[tool.ruff]
preview = true
line-length = 99

[tool.pytest.ini_options]
# addopts = "--cov=moat --cov-report=term-missing -x"
addopts = "-x"
log_cli_level = "DEBUG"
pythonpath = [
  ".",
]
testpaths = [
  "tests",
]
asyncio_default_fixture_loop_scope = "function"

[project.optional-dependencies]
dev = [
	"cbor2",
        "numpy",
	"passlib",
	"pytest-trio",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A003",
    "ANN",
    "B008", "B028",
    "BLE001",
    "C",
    "COM812",
    "D105", "D107",
    "D2", "D3", "D4",
    "EM10",
    "ERA",
    "FBT",
    "FIX",
    "I001",
    "INP001",
    "N",
    "PERF",
    "PGH003",
    "PIE790",
    "PLC0414",
    "PLR",
    "PLW0603", "PLW1514",
    "PTH",
    "RET50",
    "RUF001", "RUF002", "RUF003", "RUF005", "RUF012",
    "S101", "S307", "S610",
    "SIM103", "SIM108",
    "T2",
    "TC006",
    "TD",
    "TRY003", "TRY300", "TRY301", "TRY400",
    "UP015", # "UP038",
    ]
explicit-preview-rules = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["help","id"]

[tool.ruff.lint.isort]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
section-order = [
    "future",
    "standard-library",
    "first-party",
    "third-party",
    "upy",
    "moat",
    "local-folder",
    "typing",
]
extra-standard-library = ["anyio","pytest"]
force-to-top = ["moat.util"]

[tool.ruff.lint.isort.sections]
moat = ["moat"]
upy = ["asyncio","esp","machine","micropython"]
typing = ["typing","collections"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
include = [
    "moat/lib/codec/*",
    "tests/*",
]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "except ImportError:",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]


